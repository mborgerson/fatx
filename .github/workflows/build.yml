name: Build

on:
  push:
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/**'
      - 'README.md'
  pull_request:
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/**'
      - 'README.md'

jobs:
  BuildWindows:
    name: Build on Windows
    runs-on: windows-latest
    steps:
    - name: Clone
      uses: actions/checkout@v4
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        setup-python: false
    - name: Build
      run: |
        mkdir build
        cmake -B build
        cmake --build build --parallel --verbose --target gfatx
  BuildUbuntu:
    name: Build on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -qy \
            build-essential pkg-config libfuse-dev cmake git qt5-default
      - name: Build
        run: |
          mkdir build
          cd build
          cmake ..
          make install
      - name: Test
        run: |
          cd tests
          ./test.sh
      - name: Test Python bindings
        run: |
          rm -rf build
          pip install --user .
          cd tests
          python test.py
  BuildDocker:
    name: Build Docker image on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        uses: actions/checkout@v4
      - name: Build
        run: docker build -t fatx .
      - name: Test
        run: |
          docker run --rm -v $PWD/tests:/work -w /work \
            --device /dev/fuse --privileged fatx ./test.sh
  BuildMacos:
    name: Build on macOS
    runs-on: macos-latest
    steps:
      - name: Clone
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          export HOMEBREW_NO_AUTO_UPDATE=1
          export HOMEBREW_NO_INSTALL_CLEANUP=1
          brew install pkgconfig cmake macfuse qt@5
      - name: Build
        run: |
          export PATH="/usr/local/opt/qt@5/bin:$PATH"
          export LDFLAGS="-L/usr/local/opt/qt@5/lib"
          export CPPFLAGS="-I/usr/local/opt/qt@5/include"
          export PKG_CONFIG_PATH="/usr/local/opt/qt@5/lib/pkgconfig"

          mkdir build
          cd build
          cmake ..
          make install
      - name: Test Python bindings
        run: |
          rm -rf build
          pip3 install --user .
          cd tests
          tar xvf xbox_hdd.img.tgz
          python3 test.py
      # XXX: Crashes
      # - name: Test
      #   run: |
      #     cd tests
      #     ./test.sh


  build_sdist:
    name: Build Python source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Build sdist
        run: python setup.py sdist
      - uses: actions/upload-artifact@v4
        with:
          name: source
          path: dist/*.tar.gz

  build_wheels:
    needs: build_sdist
    name: Build wheel ${{ matrix.wheel }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          #- { os: macos-latest,   wheel: cp310-macosx_x86_64 }
          - { os: windows-latest, wheel: cp310-win_amd64 }
          - { os: ubuntu-latest,  wheel: cp310-manylinux_x86_64 }

    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Download source distribution
        uses: actions/download-artifact@v4
        with:
          name: source
      - name: Get package name
        run: python -c "import os, glob; open(os.environ['GITHUB_ENV'], 'w').write('PKG=' + glob.glob('pyfatx-*.tar.gz')[0][0:-7] + '\n')"
      - name: Unpack source distribution
        run: tar -xf ${{ env.PKG }}.tar.gz
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.23.3
      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse ${{ env.PKG }}
        env:
          CIBW_BUILD: ${{ matrix.wheel }}
          # manylinux container has an old cmake. Simply grab recent cmake from
          # pypi. Other platforms use recent cmake provided by GH actions host.
          CIBW_BEFORE_BUILD_LINUX: pip install cmake
          # CIBW_TEST_COMMAND: python -m unittest discover -v -s {package}/tests
          CIBW_BUILD_VERBOSITY: 1
      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.wheel }}
          path: ./wheelhouse/*.whl

  upload_pypi:
    needs: [build_wheels, build_sdist, BuildWindows, BuildUbuntu, BuildDocker, BuildMacos]
    name: Upload Python distribution to PyPI
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - run: |
          mkdir dist
          find artifacts -type f -exec mv {} dist \;
      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
