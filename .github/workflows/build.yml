name: Build

on:
  push:
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/**'
      - 'README.md'
      - 'rust/**'
  pull_request:
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/**'
      - 'README.md'
      - 'rust/**'

jobs:
  BuildWindows:
    name: Build on Windows
    runs-on: windows-latest
    steps:
    - name: Clone
      uses: actions/checkout@v4
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        setup-python: false
    - name: Build libfatx
      shell: bash
      run: |
        pushd libfatx
        cmake -Bbuild -S. -DCMAKE_INSTALL_PREFIX=$PWD/../install
        cmake --build build --parallel --verbose --target install
        popd
    - name: Build gfatx
      shell: bash
      run: |
        pushd gfatx
        cmake -Bbuild -S. -DCMAKE_PREFIX_PATH=$PWD/../install
        cmake --build build --parallel --verbose --target gfatx
        popd

  BuildUbuntu:
    name: Build on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -qy \
            build-essential pkg-config libfuse-dev cmake git qt6-base-dev qt6-tools-dev qt6-tools-dev-tools
      - name: Build libfatx
        shell: bash
        run: |
          pushd libfatx
          cmake -Bbuild -S. -DCMAKE_INSTALL_PREFIX=$PWD/../install
          cmake --build build --parallel --verbose --target install
          popd
      - name: Build gfatx
        shell: bash
        run: |
          pushd gfatx
          cmake -Bbuild -S. -DCMAKE_PREFIX_PATH=$PWD/../install
          cmake --build build --parallel --verbose --target gfatx
          popd
      - name: Build fatxfs
        shell: bash
        run: |
          pushd fatxfs
          cmake -Bbuild -S. -DCMAKE_PREFIX_PATH=$PWD/../install
          cmake --build build --parallel --verbose --target install
          popd
      - name: Test fatxfs
        run: |
          pushd fatxfs
          ./test.sh
      - name: Test pyfatx
        run: |
          pushd pyfatx

          mkdir venv
          python -m venv venv
          source venv/bin/activate

          pip install .
          cd tests
          python test.py

  BuildDocker:
    name: Build Docker image on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        uses: actions/checkout@v4
      - name: Build
        run: docker build -t fatx .
      - name: Test
        run: |
          docker run --rm -v $PWD/fatxfs:/work -w /work \
            --device /dev/fuse --privileged fatx ./test.sh

  BuildMacos:
    name: Build on macOS
    runs-on: macos-latest
    steps:
      - name: Clone
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          export HOMEBREW_NO_AUTO_UPDATE=1
          export HOMEBREW_NO_INSTALL_CLEANUP=1
          brew install macfuse qt@6
      - name: Build libfatx
        shell: bash
        run: |
          pushd libfatx
          cmake -Bbuild -S. -DCMAKE_INSTALL_PREFIX=$PWD/../install
          cmake --build build --parallel --verbose --target install
          popd
      - name: Build gfatx
        shell: bash
        run: |
          export PATH="/usr/local/opt/qt@6/bin:$PATH"
          export LDFLAGS="-L/usr/local/opt/qt@6/lib"
          export CPPFLAGS="-I/usr/local/opt/qt@6/include"
          export PKG_CONFIG_PATH="/usr/local/opt/qt@6/lib/pkgconfig"

          pushd gfatx
          cmake -Bbuild -S. -DCMAKE_PREFIX_PATH=$PWD/../install
          cmake --build build --parallel --verbose --target gfatx
          popd
      - name: Build fatxfs
        shell: bash
        run: |
          pushd fatxfs
          cmake -Bbuild -S. -DCMAKE_PREFIX_PATH=$PWD/../install
          cmake --build build --parallel --verbose --target fatxfs
          popd
      # XXX: Crashes
      # - name: Test fatxfs
      #   run: |
      #     pushd fatxfs
      #     ./test.sh
      - name: Test pyfatx
        run: |
          pushd pyfatx

          mkdir venv
          python -m venv venv
          source venv/bin/activate

          pip install .
          cd tests
          python test.py

  build_sdist:
    name: Build Python source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Build sdist
        run: |
          pushd pyfatx
          python setup.py sdist
      - uses: actions/upload-artifact@v4
        with:
          name: source
          path: pyfatx/dist/*.tar.gz

  build_wheels:
    needs: build_sdist
    name: Build wheel ${{ matrix.wheel }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          #- { os: macos-latest,   wheel: cp310-macosx_x86_64 }
          - { os: windows-latest, wheel: cp310-win_amd64 }
          - { os: ubuntu-latest,  wheel: cp310-manylinux_x86_64 }

    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Download source distribution
        uses: actions/download-artifact@v4
        with:
          name: source
      - name: Get package name
        run: python -c "import os, glob; open(os.environ['GITHUB_ENV'], 'w').write('PKG=' + glob.glob('pyfatx-*.tar.gz')[0][0:-7] + '\n')"
      - name: Unpack source distribution
        run: tar -xf ${{ env.PKG }}.tar.gz
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.23.3
      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse ${{ env.PKG }}
        env:
          CIBW_BUILD: ${{ matrix.wheel }}
          # manylinux container has an old cmake. Simply grab recent cmake from
          # pypi. Other platforms use recent cmake provided by GH actions host.
          CIBW_BEFORE_BUILD_LINUX: pip install cmake
          # CIBW_TEST_COMMAND: python -m unittest discover -v -s {package}/tests
          CIBW_BUILD_VERBOSITY: 1
      - uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.wheel }}
          path: ./wheelhouse/*.whl

  upload_pypi:
    needs: [build_wheels, build_sdist, BuildWindows, BuildUbuntu, BuildDocker, BuildMacos]
    name: Upload Python distribution to PyPI
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - run: |
          mkdir dist
          find artifacts -type f -exec mv {} dist \;
      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
